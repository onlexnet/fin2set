# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: uservice-webapi build and test

on:
  workflow_dispatch:
    # section to define manual start of CI pipeline
  push:
    branches:
      - main
    paths: 
      - .github/workflows/uservice-webapi-build.yaml
      - uservice-webapi/**
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
    paths:
      - .github/workflows/uservice-webapi-build.yaml
      - uservice-webapi/**

jobs:

  Build:
    runs-on: ubuntu-latest
    environment: dev01
    env:
      FIN2SET_CLIENT_ID: ${{ secrets.FIN2SET_CLIENT_ID }}
      FIN2SET_CLIENT_SECRET: ${{ secrets.FIN2SET_CLIENT_SECRET }}
    outputs:
      uservice_webapi_image_name: ${{ steps.BuildDockerImage.outputs.image_name }}
  
  
    steps:

      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          # https://github.com/actions/setup-java#supported-distributions
          distribution: temurin
          cache: maven

      - name: Login to Docker 
        # required as we host docker images on github
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set SEMVERSION
        run: echo "SEMVERSION=$(cat .semversion)" >> $GITHUB_ENV
        working-directory: uservice-webapi

      - name: cache maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('uservice-webapi/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      

      - name: Add Application INsights agent
        run: |
          # download latest version of applicationinsights to folder expected to be included into target image
          # as we known, the copied file will be located finally in /workspaces/BOOT-INFO/classes/applicationinsights.
          cd host/src/main/resources/applicationinsights # goto well-known folder designed to be included in target image
          wget --no-verbose https://github.com/microsoft/ApplicationInsights-Java/releases/download/3.4.18/applicationinsights-agent-3.4.18.jar # download ...
          mv applicationinsights-agent-3.4.18.jar applicationinsights-agent.jar # ... and rename to unified name applicationinsight agent
        working-directory: uservice-webapi
    
      
      - name: Build with Maven Webapi
        run: |
          mvn -ntp install -Drevision=$SEMVERSION
        working-directory: uservice-webapi
      
      - id: BuildDockerImage
        name: Build Docker Image
        working-directory: uservice-webapi
        run: |
          export IMAGE_NAME_BASE=ghcr.io/onlexnet/fin2set-webapi

          export IMAGE_NAME_HOST=$IMAGE_NAME_BASE

          # build 'latest' image. 'latest' tag is added automatically by used here 'spring-boot:build-image' plugin
          # as 'build-image' invokes 'package' phase, lets disable tests with -DskipTest as the build has been already done, packaged and of course tested
          # more about double packaging: https://github.com/spring-projects/spring-boot/issues/26455#issuecomment-845397236
          mvn spring-boot:build-image -ntp -pl host -Dspring-boot.build-image.imageName=$IMAGE_NAME_HOST -Drevision=$SEMVERSION -DskipTests

          # add proper ID to distinguish image from other images built in this workflow
          docker tag $IMAGE_NAME_HOST $IMAGE_NAME_HOST:$GITHUB_RUN_ID

          docker push --all-tags $IMAGE_NAME_HOST
          echo "docker push --all-tags $IMAGE_NAME_HOST"

          docker images

          # export just published image name so that it can be used by next steps
          echo "image_name=$IMAGE_NAME_HOST:$GITHUB_RUN_ID" >> "$GITHUB_OUTPUT"

  DeployPrd:
    # https://learn.microsoft.com/en-us/azure/container-apps/github-actions#deploy-an-existing-container-image-to-container-apps
    name: Deploy to Dev01
    # if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed' && (github.event.ref == 'refs/heads/main' || github.event.ref == 'siudeks/issue49'))
    needs: [ Build ]
    runs-on: ubuntu-latest
    environment: dev01
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          # prepare credentials for Azure CLI
          # more: https://github.com/marketplace/actions/azure-login#configure-a-service-principal-with-a-secret
          creds: '{"clientId":"${{ secrets.FIN2SET_CLIENT_ID }}","clientSecret":"${{ secrets.FIN2SET_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      
      - name: Display Image Name
        env:
          IMAGE_NAME_WEBAPI: ${{ needs.Build.outputs.uservice_webapi_image_name }}
          CONTAINERAPP_NAME: ${{ vars.CONTAINERAPP_NAME_WEBAPI }}
        run: |
          # TODO replace hardcoded params below with proper values
          az containerapp update -n $CONTAINERAPP_NAME -g fin2set-env-dev01 --container-name uservice-webapi --image $IMAGE_NAME_WEBAPI

