ENV_DATABASE_HOST=${DATABASE_HOST}
ENV_DATABASE_PORT=${DATABASE_PORT}
ENV_DATABASE_NAME=${DATABASE_NAME}
ENV_DATABASE_USERNAME=${DATABASE_USERNAME}
ENV_DATABASE_PASSWORD=${DATABASE_PASSWORD}


spring.datasource.url=jdbc:sqlserver://${ENV_DATABASE_HOST}:${ENV_DATABASE_PORT};database=${ENV_DATABASE_NAME};encrypt=false
spring.datasource.username=${ENV_DATABASE_USERNAME}
spring.datasource.password=${ENV_DATABASE_PASSWORD}

# Spring properties:
# https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html

# Disable Spring logo. 
# Not required in logs
spring.main.banner-mode=off

# The GraphQL WebSocket endpoint is off by default. To enable it:
# For a Servlet application, add the WebSocket starter spring-boot-starter-websocket
# For a WebFlux application, no additional dependency is required
# For both, the spring.graphql.websocket.path application property must be set
spring.graphql.websocket.path=/graphql

spring.graphql.graphiql.enabled=true
spring.graphql.graphiql.path=/graphiql
# Cors: https://docs.spring.io/spring-graphql/docs/1.0.0-M3/reference/html/#boot-graphql-cors
# Comma-separated list of origins to allow. '*' allows all origins. E.g. 'https://example.org'
spring.graphql.cors.allowed-origins=*
# spring.graphql.cors.allowed-origin-patterns= # Comma-separated list of origin patterns like 'https://*.example.com' to allow.
# Comma-separated list of methods to allow. '*' allows all methods.
spring.graphql.cors.allowed-methods=*
# Comma-separated list of headers to allow in a request. '*' allows all headers.
spring.graphql.cors.allowed-headers=*
# spring.graphql.cors.exposed-headers= # Comma-separated list of headers to include in a response.
# spring.graphql.cors.allow-credentials= # Whether credentials are supported. When not set, credentials are not supported.
# How long the response from a pre-flight request can be cached by clients.
spring.graphql.cors.max-age=1800s

# Whether to use virtual threads. Default: false
spring.threads.virtual.enabled=true

fin2set.openai.key=${OPENAI-KEY}
fin2set.openai.endpoint=${OPENAI-ENDPOINT}


# we disable docker-compose as as it should be used only for local profile.
# spring.docker.compose.enabled=true

# https://learn.microsoft.com/en-us/sql/connect/jdbc/connecting-with-ssl-encryption?view=sql-server-ver16#configuring-the-connection
# spring.datasource.url=jdbc:sqlserver://localhost:1433;trustServerCertificate=true;databaseName=tempdb
# spring.datasource.username=sa
# spring.datasource.password=password123!
# spring.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver

# spring.modulith.events.jdbc.schema-initialization.enabled=false
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

springdoc.show-actuator=true
